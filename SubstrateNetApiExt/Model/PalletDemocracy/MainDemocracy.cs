//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Extrinsics;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletDemocracy;
using SubstrateNetApi.Model.PrimitiveTypes;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletDemocracy
{
    
    
    public sealed class DemocracyStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public DemocracyStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "PublicPropCount"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "PublicProps"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.PrimitiveTypes.H256,SubstrateNetApi.Model.SpCore.AccountId32>>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "DepositOf"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                            SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNetApi.Model.Types.Primitive.U32), typeof(BaseTuple<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>,SubstrateNetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "Preimages"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                            SubstrateNetApi.Model.Meta.Storage.Hasher.Identity}, typeof(SubstrateNetApi.Model.PrimitiveTypes.H256), typeof(SubstrateNetApi.Model.PalletDemocracy.EnumPreimageStatus)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "ReferendumCount"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "LowestUnbaked"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "ReferendumInfoOf"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                            SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNetApi.Model.Types.Primitive.U32), typeof(SubstrateNetApi.Model.PalletDemocracy.EnumReferendumInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "VotingOf"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                            SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNetApi.Model.SpCore.AccountId32), typeof(SubstrateNetApi.Model.PalletDemocracy.EnumVoting)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "Locks"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                            SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNetApi.Model.SpCore.AccountId32), typeof(SubstrateNetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "LastTabledWasExternal"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "NextExternal"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256,SubstrateNetApi.Model.PalletDemocracy.EnumVoteThreshold>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "Blacklist"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                            SubstrateNetApi.Model.Meta.Storage.Hasher.Identity}, typeof(SubstrateNetApi.Model.PrimitiveTypes.H256), typeof(BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "Cancellations"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                            SubstrateNetApi.Model.Meta.Storage.Hasher.Identity}, typeof(SubstrateNetApi.Model.PrimitiveTypes.H256), typeof(SubstrateNetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Democracy", "StorageVersion"), new System.Tuple<SubstrateNetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNetApi.Model.PalletDemocracy.EnumReleases)));
        }
        
        /// <summary>
        /// >> PublicPropCountParams
        ///  The number of (public) proposals that have been made so far.
        /// </summary>
        public static string PublicPropCountParams()
        {
            return RequestGenerator.GetStorage("Democracy", "PublicPropCount", SubstrateNetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PublicPropCount
        ///  The number of (public) proposals that have been made so far.
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> PublicPropCount(CancellationToken token)
        {
            string parameters = DemocracyStorage.PublicPropCountParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> PublicPropsParams
        ///  The public proposals. Unsorted. The second item is the proposal's hash.
        /// </summary>
        public static string PublicPropsParams()
        {
            return RequestGenerator.GetStorage("Democracy", "PublicProps", SubstrateNetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PublicProps
        ///  The public proposals. Unsorted. The second item is the proposal's hash.
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.PrimitiveTypes.H256,SubstrateNetApi.Model.SpCore.AccountId32>>> PublicProps(CancellationToken token)
        {
            string parameters = DemocracyStorage.PublicPropsParams();
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.PrimitiveTypes.H256,SubstrateNetApi.Model.SpCore.AccountId32>>>(parameters, token);
        }
        
        /// <summary>
        /// >> DepositOfParams
        ///  Those who have locked a deposit.
        /// 
        ///  TWOX-NOTE: Safe, as increasing integer keys are safe.
        /// </summary>
        public static string DepositOfParams(SubstrateNetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Democracy", "DepositOf", SubstrateNetApi.Model.Meta.Storage.Type.Map, new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                        SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new SubstrateNetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DepositOf
        ///  Those who have locked a deposit.
        /// 
        ///  TWOX-NOTE: Safe, as increasing integer keys are safe.
        /// </summary>
        public async Task<BaseTuple<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>,SubstrateNetApi.Model.Types.Primitive.U128>> DepositOf(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = DemocracyStorage.DepositOfParams(key);
            return await _client.GetStorageAsync<BaseTuple<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>,SubstrateNetApi.Model.Types.Primitive.U128>>(parameters, token);
        }
        
        /// <summary>
        /// >> PreimagesParams
        ///  Map of hashes to the proposal preimage, along with who registered it and their deposit.
        ///  The block number is the block at which it was deposited.
        /// </summary>
        public static string PreimagesParams(SubstrateNetApi.Model.PrimitiveTypes.H256 key)
        {
            return RequestGenerator.GetStorage("Democracy", "Preimages", SubstrateNetApi.Model.Meta.Storage.Type.Map, new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                        SubstrateNetApi.Model.Meta.Storage.Hasher.Identity}, new SubstrateNetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Preimages
        ///  Map of hashes to the proposal preimage, along with who registered it and their deposit.
        ///  The block number is the block at which it was deposited.
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletDemocracy.EnumPreimageStatus> Preimages(SubstrateNetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            string parameters = DemocracyStorage.PreimagesParams(key);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletDemocracy.EnumPreimageStatus>(parameters, token);
        }
        
        /// <summary>
        /// >> ReferendumCountParams
        ///  The next free referendum index, aka the number of referenda started so far.
        /// </summary>
        public static string ReferendumCountParams()
        {
            return RequestGenerator.GetStorage("Democracy", "ReferendumCount", SubstrateNetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ReferendumCount
        ///  The next free referendum index, aka the number of referenda started so far.
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> ReferendumCount(CancellationToken token)
        {
            string parameters = DemocracyStorage.ReferendumCountParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> LowestUnbakedParams
        ///  The lowest referendum index representing an unbaked referendum. Equal to
        ///  `ReferendumCount` if there isn't a unbaked referendum.
        /// </summary>
        public static string LowestUnbakedParams()
        {
            return RequestGenerator.GetStorage("Democracy", "LowestUnbaked", SubstrateNetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LowestUnbaked
        ///  The lowest referendum index representing an unbaked referendum. Equal to
        ///  `ReferendumCount` if there isn't a unbaked referendum.
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> LowestUnbaked(CancellationToken token)
        {
            string parameters = DemocracyStorage.LowestUnbakedParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ReferendumInfoOfParams
        ///  Information concerning any given referendum.
        /// 
        ///  TWOX-NOTE: SAFE as indexes are not under an attacker���s control.
        /// </summary>
        public static string ReferendumInfoOfParams(SubstrateNetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Democracy", "ReferendumInfoOf", SubstrateNetApi.Model.Meta.Storage.Type.Map, new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                        SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new SubstrateNetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReferendumInfoOf
        ///  Information concerning any given referendum.
        /// 
        ///  TWOX-NOTE: SAFE as indexes are not under an attacker���s control.
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletDemocracy.EnumReferendumInfo> ReferendumInfoOf(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = DemocracyStorage.ReferendumInfoOfParams(key);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletDemocracy.EnumReferendumInfo>(parameters, token);
        }
        
        /// <summary>
        /// >> VotingOfParams
        ///  All votes for a particular voter. We store the balance for the number of votes that we
        ///  have recorded. The second item is the total amount of delegations, that will be added.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
        /// </summary>
        public static string VotingOfParams(SubstrateNetApi.Model.SpCore.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Democracy", "VotingOf", SubstrateNetApi.Model.Meta.Storage.Type.Map, new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                        SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new SubstrateNetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> VotingOf
        ///  All votes for a particular voter. We store the balance for the number of votes that we
        ///  have recorded. The second item is the total amount of delegations, that will be added.
        /// 
        ///  TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletDemocracy.EnumVoting> VotingOf(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            string parameters = DemocracyStorage.VotingOfParams(key);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletDemocracy.EnumVoting>(parameters, token);
        }
        
        /// <summary>
        /// >> LocksParams
        ///  Accounts for which there are locks in action which may be removed at some point in the
        ///  future. The value is the block number at which the lock expires and may be removed.
        /// 
        ///  TWOX-NOTE: OK ��� `AccountId` is a secure hash.
        /// </summary>
        public static string LocksParams(SubstrateNetApi.Model.SpCore.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Democracy", "Locks", SubstrateNetApi.Model.Meta.Storage.Type.Map, new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                        SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new SubstrateNetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Locks
        ///  Accounts for which there are locks in action which may be removed at some point in the
        ///  future. The value is the block number at which the lock expires and may be removed.
        /// 
        ///  TWOX-NOTE: OK ��� `AccountId` is a secure hash.
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> Locks(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            string parameters = DemocracyStorage.LocksParams(key);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> LastTabledWasExternalParams
        ///  True if the last referendum tabled was submitted externally. False if it was a public
        ///  proposal.
        /// </summary>
        public static string LastTabledWasExternalParams()
        {
            return RequestGenerator.GetStorage("Democracy", "LastTabledWasExternal", SubstrateNetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LastTabledWasExternal
        ///  True if the last referendum tabled was submitted externally. False if it was a public
        ///  proposal.
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.Bool> LastTabledWasExternal(CancellationToken token)
        {
            string parameters = DemocracyStorage.LastTabledWasExternalParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
        
        /// <summary>
        /// >> NextExternalParams
        ///  The referendum to be tabled whenever it would be valid to table an external proposal.
        ///  This happens when a referendum needs to be tabled and one of two conditions are met:
        ///  - `LastTabledWasExternal` is `false`; or
        ///  - `PublicProps` is empty.
        /// </summary>
        public static string NextExternalParams()
        {
            return RequestGenerator.GetStorage("Democracy", "NextExternal", SubstrateNetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextExternal
        ///  The referendum to be tabled whenever it would be valid to table an external proposal.
        ///  This happens when a referendum needs to be tabled and one of two conditions are met:
        ///  - `LastTabledWasExternal` is `false`; or
        ///  - `PublicProps` is empty.
        /// </summary>
        public async Task<BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256,SubstrateNetApi.Model.PalletDemocracy.EnumVoteThreshold>> NextExternal(CancellationToken token)
        {
            string parameters = DemocracyStorage.NextExternalParams();
            return await _client.GetStorageAsync<BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256,SubstrateNetApi.Model.PalletDemocracy.EnumVoteThreshold>>(parameters, token);
        }
        
        /// <summary>
        /// >> BlacklistParams
        ///  A record of who vetoed what. Maps proposal hash to a possible existent block number
        ///  (until when it may not be resubmitted) and who vetoed it.
        /// </summary>
        public static string BlacklistParams(SubstrateNetApi.Model.PrimitiveTypes.H256 key)
        {
            return RequestGenerator.GetStorage("Democracy", "Blacklist", SubstrateNetApi.Model.Meta.Storage.Type.Map, new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                        SubstrateNetApi.Model.Meta.Storage.Hasher.Identity}, new SubstrateNetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Blacklist
        ///  A record of who vetoed what. Maps proposal hash to a possible existent block number
        ///  (until when it may not be resubmitted) and who vetoed it.
        /// </summary>
        public async Task<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>> Blacklist(SubstrateNetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            string parameters = DemocracyStorage.BlacklistParams(key);
            return await _client.GetStorageAsync<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>>(parameters, token);
        }
        
        /// <summary>
        /// >> CancellationsParams
        ///  Record of all proposals that have been subject to emergency cancellation.
        /// </summary>
        public static string CancellationsParams(SubstrateNetApi.Model.PrimitiveTypes.H256 key)
        {
            return RequestGenerator.GetStorage("Democracy", "Cancellations", SubstrateNetApi.Model.Meta.Storage.Type.Map, new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                        SubstrateNetApi.Model.Meta.Storage.Hasher.Identity}, new SubstrateNetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Cancellations
        ///  Record of all proposals that have been subject to emergency cancellation.
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.Bool> Cancellations(SubstrateNetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            string parameters = DemocracyStorage.CancellationsParams(key);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
        
        /// <summary>
        /// >> StorageVersionParams
        ///  Storage version of the pallet.
        /// 
        ///  New networks start with last version.
        /// </summary>
        public static string StorageVersionParams()
        {
            return RequestGenerator.GetStorage("Democracy", "StorageVersion", SubstrateNetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> StorageVersion
        ///  Storage version of the pallet.
        /// 
        ///  New networks start with last version.
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletDemocracy.EnumReleases> StorageVersion(CancellationToken token)
        {
            string parameters = DemocracyStorage.StorageVersionParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletDemocracy.EnumReleases>(parameters, token);
        }
    }
    
    public sealed class DemocracyCalls
    {
        
        /// <summary>
        /// >> propose
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Propose(SubstrateNetApi.Model.PrimitiveTypes.H256 proposal_hash, BaseCom<SubstrateNetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(11, "Democracy", 0, "propose", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> second
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Second(BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> proposal, BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> seconds_upper_bound)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            byteArray.AddRange(seconds_upper_bound.Encode());
            return new Method(11, "Democracy", 1, "second", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Vote(BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> ref_index, SubstrateNetApi.Model.PalletDemocracy.EnumAccountVote vote)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ref_index.Encode());
            byteArray.AddRange(vote.Encode());
            return new Method(11, "Democracy", 2, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> emergency_cancel
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method EmergencyCancel(SubstrateNetApi.Model.Types.Primitive.U32 ref_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ref_index.Encode());
            return new Method(11, "Democracy", 3, "emergency_cancel", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> external_propose
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExternalPropose(SubstrateNetApi.Model.PrimitiveTypes.H256 proposal_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            return new Method(11, "Democracy", 4, "external_propose", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> external_propose_majority
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExternalProposeMajority(SubstrateNetApi.Model.PrimitiveTypes.H256 proposal_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            return new Method(11, "Democracy", 5, "external_propose_majority", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> external_propose_default
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ExternalProposeDefault(SubstrateNetApi.Model.PrimitiveTypes.H256 proposal_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            return new Method(11, "Democracy", 6, "external_propose_default", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> fast_track
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method FastTrack(SubstrateNetApi.Model.PrimitiveTypes.H256 proposal_hash, SubstrateNetApi.Model.Types.Primitive.U32 voting_period, SubstrateNetApi.Model.Types.Primitive.U32 delay)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            byteArray.AddRange(voting_period.Encode());
            byteArray.AddRange(delay.Encode());
            return new Method(11, "Democracy", 7, "fast_track", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> veto_external
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method VetoExternal(SubstrateNetApi.Model.PrimitiveTypes.H256 proposal_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            return new Method(11, "Democracy", 8, "veto_external", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_referendum
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelReferendum(BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> ref_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ref_index.Encode());
            return new Method(11, "Democracy", 9, "cancel_referendum", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_queued
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelQueued(SubstrateNetApi.Model.Types.Primitive.U32 which)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(which.Encode());
            return new Method(11, "Democracy", 10, "cancel_queued", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> delegate
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Delegate(SubstrateNetApi.Model.SpCore.AccountId32 to, SubstrateNetApi.Model.PalletDemocracy.EnumConviction conviction, SubstrateNetApi.Model.Types.Primitive.U128 balance)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(conviction.Encode());
            byteArray.AddRange(balance.Encode());
            return new Method(11, "Democracy", 11, "delegate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> undelegate
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Undelegate()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(11, "Democracy", 12, "undelegate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_public_proposals
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClearPublicProposals()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(11, "Democracy", 13, "clear_public_proposals", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> note_preimage
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method NotePreimage(BaseVec<SubstrateNetApi.Model.Types.Primitive.U8> encoded_proposal)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(encoded_proposal.Encode());
            return new Method(11, "Democracy", 14, "note_preimage", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> note_preimage_operational
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method NotePreimageOperational(BaseVec<SubstrateNetApi.Model.Types.Primitive.U8> encoded_proposal)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(encoded_proposal.Encode());
            return new Method(11, "Democracy", 15, "note_preimage_operational", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> note_imminent_preimage
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method NoteImminentPreimage(BaseVec<SubstrateNetApi.Model.Types.Primitive.U8> encoded_proposal)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(encoded_proposal.Encode());
            return new Method(11, "Democracy", 16, "note_imminent_preimage", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> note_imminent_preimage_operational
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method NoteImminentPreimageOperational(BaseVec<SubstrateNetApi.Model.Types.Primitive.U8> encoded_proposal)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(encoded_proposal.Encode());
            return new Method(11, "Democracy", 17, "note_imminent_preimage_operational", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> reap_preimage
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ReapPreimage(SubstrateNetApi.Model.PrimitiveTypes.H256 proposal_hash, BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> proposal_len_upper_bound)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            byteArray.AddRange(proposal_len_upper_bound.Encode());
            return new Method(11, "Democracy", 18, "reap_preimage", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Unlock(SubstrateNetApi.Model.SpCore.AccountId32 target)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            return new Method(11, "Democracy", 19, "unlock", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveVote(SubstrateNetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(11, "Democracy", 20, "remove_vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_other_vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveOtherVote(SubstrateNetApi.Model.SpCore.AccountId32 target, SubstrateNetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(index.Encode());
            return new Method(11, "Democracy", 21, "remove_other_vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> enact_proposal
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method EnactProposal(SubstrateNetApi.Model.PrimitiveTypes.H256 proposal_hash, SubstrateNetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            byteArray.AddRange(index.Encode());
            return new Method(11, "Democracy", 22, "enact_proposal", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> blacklist
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Blacklist(SubstrateNetApi.Model.PrimitiveTypes.H256 proposal_hash, BaseOpt<SubstrateNetApi.Model.Types.Primitive.U32> maybe_ref_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            byteArray.AddRange(maybe_ref_index.Encode());
            return new Method(11, "Democracy", 23, "blacklist", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_proposal
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelProposal(BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> prop_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(prop_index.Encode());
            return new Method(11, "Democracy", 24, "cancel_proposal", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> Proposed
    /// A motion has been proposed by a public account. \[proposal_index, deposit\]
    /// </summary>
    public sealed class EventProposed : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> Tabled
    /// A public proposal has been tabled for referendum vote. \[proposal_index, deposit,
    /// depositors\]
    /// </summary>
    public sealed class EventTabled : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32, SubstrateNetApi.Model.Types.Primitive.U128, BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>
    {
    }
    
    /// <summary>
    /// >> ExternalTabled
    /// An external proposal has been tabled.
    /// </summary>
    public sealed class EventExternalTabled : BaseTuple
    {
    }
    
    /// <summary>
    /// >> Started
    /// A referendum has begun. \[ref_index, threshold\]
    /// </summary>
    public sealed class EventStarted : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32, SubstrateNetApi.Model.PalletDemocracy.EnumVoteThreshold>
    {
    }
    
    /// <summary>
    /// >> Passed
    /// A proposal has been approved by referendum. \[ref_index\]
    /// </summary>
    public sealed class EventPassed : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> NotPassed
    /// A proposal has been rejected by referendum. \[ref_index\]
    /// </summary>
    public sealed class EventNotPassed : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> Cancelled
    /// A referendum has been cancelled. \[ref_index\]
    /// </summary>
    public sealed class EventCancelled : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> Executed
    /// A proposal has been enacted. \[ref_index, result\]
    /// </summary>
    public sealed class EventExecuted : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32, BaseTuple<BaseTuple,  SubstrateNetApi.Model.SpRuntime.EnumDispatchError>>
    {
    }
    
    /// <summary>
    /// >> Delegated
    /// An account has delegated their vote to another account. \[who, target\]
    /// </summary>
    public sealed class EventDelegated : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Undelegated
    /// An \[account\] has cancelled a previous delegation operation.
    /// </summary>
    public sealed class EventUndelegated : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Vetoed
    /// An external proposal has been vetoed. \[who, proposal_hash, until\]
    /// </summary>
    public sealed class EventVetoed : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.PrimitiveTypes.H256, SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> PreimageNoted
    /// A proposal's preimage was noted, and the deposit taken. \[proposal_hash, who, deposit\]
    /// </summary>
    public sealed class EventPreimageNoted : BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> PreimageUsed
    /// A proposal preimage was removed and used (the deposit was returned).
    /// \[proposal_hash, provider, deposit\]
    /// </summary>
    public sealed class EventPreimageUsed : BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> PreimageInvalid
    /// A proposal could not be executed because its preimage was invalid.
    /// \[proposal_hash, ref_index\]
    /// </summary>
    public sealed class EventPreimageInvalid : BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256, SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> PreimageMissing
    /// A proposal could not be executed because its preimage was missing.
    /// \[proposal_hash, ref_index\]
    /// </summary>
    public sealed class EventPreimageMissing : BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256, SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> PreimageReaped
    /// A registered preimage was removed and the deposit collected by the reaper.
    /// \[proposal_hash, provider, deposit, reaper\]
    /// </summary>
    public sealed class EventPreimageReaped : BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128, SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Blacklisted
    /// A proposal \[hash\] has been blacklisted permanently.
    /// </summary>
    public sealed class EventBlacklisted : BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256>
    {
    }
    
    public enum DemocracyErrors
    {
        
        /// <summary>
        /// >> ValueLow
        /// Value too low
        /// </summary>
        ValueLow,
        
        /// <summary>
        /// >> ProposalMissing
        /// Proposal does not exist
        /// </summary>
        ProposalMissing,
        
        /// <summary>
        /// >> AlreadyCanceled
        /// Cannot cancel the same proposal twice
        /// </summary>
        AlreadyCanceled,
        
        /// <summary>
        /// >> DuplicateProposal
        /// Proposal already made
        /// </summary>
        DuplicateProposal,
        
        /// <summary>
        /// >> ProposalBlacklisted
        /// Proposal still blacklisted
        /// </summary>
        ProposalBlacklisted,
        
        /// <summary>
        /// >> NotSimpleMajority
        /// Next external proposal not simple majority
        /// </summary>
        NotSimpleMajority,
        
        /// <summary>
        /// >> InvalidHash
        /// Invalid hash
        /// </summary>
        InvalidHash,
        
        /// <summary>
        /// >> NoProposal
        /// No external proposal
        /// </summary>
        NoProposal,
        
        /// <summary>
        /// >> AlreadyVetoed
        /// Identity may not veto a proposal twice
        /// </summary>
        AlreadyVetoed,
        
        /// <summary>
        /// >> DuplicatePreimage
        /// Preimage already noted
        /// </summary>
        DuplicatePreimage,
        
        /// <summary>
        /// >> NotImminent
        /// Not imminent
        /// </summary>
        NotImminent,
        
        /// <summary>
        /// >> TooEarly
        /// Too early
        /// </summary>
        TooEarly,
        
        /// <summary>
        /// >> Imminent
        /// Imminent
        /// </summary>
        Imminent,
        
        /// <summary>
        /// >> PreimageMissing
        /// Preimage not found
        /// </summary>
        PreimageMissing,
        
        /// <summary>
        /// >> ReferendumInvalid
        /// Vote given for invalid referendum
        /// </summary>
        ReferendumInvalid,
        
        /// <summary>
        /// >> PreimageInvalid
        /// Invalid preimage
        /// </summary>
        PreimageInvalid,
        
        /// <summary>
        /// >> NoneWaiting
        /// No proposals waiting
        /// </summary>
        NoneWaiting,
        
        /// <summary>
        /// >> NotVoter
        /// The given account did not vote on the referendum.
        /// </summary>
        NotVoter,
        
        /// <summary>
        /// >> NoPermission
        /// The actor has no permission to conduct the action.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> AlreadyDelegating
        /// The account is already delegating.
        /// </summary>
        AlreadyDelegating,
        
        /// <summary>
        /// >> InsufficientFunds
        /// Too high a balance was provided that the account cannot afford.
        /// </summary>
        InsufficientFunds,
        
        /// <summary>
        /// >> NotDelegating
        /// The account is not currently delegating.
        /// </summary>
        NotDelegating,
        
        /// <summary>
        /// >> VotesExist
        /// The account currently has votes attached to it and the operation cannot succeed until
        /// these are removed, either through `unvote` or `reap_vote`.
        /// </summary>
        VotesExist,
        
        /// <summary>
        /// >> InstantNotAllowed
        /// The instant referendum origin is currently disallowed.
        /// </summary>
        InstantNotAllowed,
        
        /// <summary>
        /// >> Nonsense
        /// Delegation to oneself makes no sense.
        /// </summary>
        Nonsense,
        
        /// <summary>
        /// >> WrongUpperBound
        /// Invalid upper bound.
        /// </summary>
        WrongUpperBound,
        
        /// <summary>
        /// >> MaxVotesReached
        /// Maximum number of votes reached.
        /// </summary>
        MaxVotesReached,
        
        /// <summary>
        /// >> TooManyProposals
        /// Maximum number of proposals reached.
        /// </summary>
        TooManyProposals,
    }
}
