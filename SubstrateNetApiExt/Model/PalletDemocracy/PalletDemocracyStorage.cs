//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletDemocracy;
using SubstrateNetApi.Model.PrimitiveTypes;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletDemocracy
{
    
    
    public sealed class PalletDemocracyStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public PalletDemocracyStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> PublicPropCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> PublicPropCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Democracy", "PublicPropCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> PublicProps
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.PrimitiveTypes.H256,SubstrateNetApi.Model.SpCore.AccountId32>>> PublicProps(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Democracy", "PublicProps", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.PrimitiveTypes.H256,SubstrateNetApi.Model.SpCore.AccountId32>>>(parameters, token);
        }
        
        /// <summary>
        /// >> DepositOf
        /// </summary>
        public async Task<BaseTuple<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>,SubstrateNetApi.Model.Types.Primitive.U128>> DepositOf(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Democracy", "DepositOf", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<BaseTuple<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>,SubstrateNetApi.Model.Types.Primitive.U128>>(parameters, token);
        }
        
        /// <summary>
        /// >> Preimages
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletDemocracy.EnumPreimageStatus> Preimages(SubstrateNetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Democracy", "Preimages", Storage.Type.Map, new[] {Storage.Hasher.Identity}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletDemocracy.EnumPreimageStatus>(parameters, token);
        }
        
        /// <summary>
        /// >> ReferendumCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> ReferendumCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Democracy", "ReferendumCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> LowestUnbaked
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> LowestUnbaked(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Democracy", "LowestUnbaked", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ReferendumInfoOf
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletDemocracy.EnumReferendumInfo> ReferendumInfoOf(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Democracy", "ReferendumInfoOf", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletDemocracy.EnumReferendumInfo>(parameters, token);
        }
        
        /// <summary>
        /// >> VotingOf
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletDemocracy.EnumVoting> VotingOf(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Democracy", "VotingOf", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletDemocracy.EnumVoting>(parameters, token);
        }
        
        /// <summary>
        /// >> Locks
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> Locks(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Democracy", "Locks", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> LastTabledWasExternal
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.Bool> LastTabledWasExternal(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Democracy", "LastTabledWasExternal", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
        
        /// <summary>
        /// >> NextExternal
        /// </summary>
        public async Task<BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256,SubstrateNetApi.Model.PalletDemocracy.EnumVoteThreshold>> NextExternal(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Democracy", "NextExternal", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256,SubstrateNetApi.Model.PalletDemocracy.EnumVoteThreshold>>(parameters, token);
        }
        
        /// <summary>
        /// >> Blacklist
        /// </summary>
        public async Task<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>> Blacklist(SubstrateNetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Democracy", "Blacklist", Storage.Type.Map, new[] {Storage.Hasher.Identity}, keyParams);
            return await _client.GetStorageAsync<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>>(parameters, token);
        }
        
        /// <summary>
        /// >> Cancellations
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.Bool> Cancellations(SubstrateNetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Democracy", "Cancellations", Storage.Type.Map, new[] {Storage.Hasher.Identity}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
        
        /// <summary>
        /// >> StorageVersion
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletDemocracy.EnumReleases> StorageVersion(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Democracy", "StorageVersion", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletDemocracy.EnumReleases>(parameters, token);
        }
    }
}
