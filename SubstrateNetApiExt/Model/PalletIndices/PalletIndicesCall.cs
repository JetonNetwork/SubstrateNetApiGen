//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Calls;
using SubstrateNetApi.Model.Types.Base;
using System;
using System.Collections.Generic;


namespace SubstrateNetApi.Model.PalletIndices
{
    
    
    /// <summary>
    /// >> Path: pallet_indices.pallet.Call
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public sealed class PalletIndicesCall
    {
        
        /// <summary>
        /// >> Extrinsic: claim
        /// Assign an previously unassigned index.
        /// 
        /// Payment: `Deposit` is reserved from the sender account.
        /// 
        /// The dispatch origin for this call must be _Signed_.
        /// 
        /// - `index`: the index to be claimed. This must not be in use.
        /// 
        /// Emits `IndexAssigned` if successful.
        /// 
        /// # <weight>
        /// - `O(1)`.
        /// - One storage mutation (codec `O(1)`).
        /// - One reserve operation.
        /// - One event.
        /// -------------------
        /// - DB Weight: 1 Read/Write (Accounts)
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall Claim(SubstrateNetApi.Model.Types.Primitive.U32 index)
        {
            return new GenericExtrinsicCall("Indices", "claim", index);
        }
        
        /// <summary>
        /// >> Extrinsic: transfer
        /// Assign an index already owned by the sender to another account. The balance reservation
        /// is effectively transferred to the new account.
        /// 
        /// The dispatch origin for this call must be _Signed_.
        /// 
        /// - `index`: the index to be re-assigned. This must be owned by the sender.
        /// - `new`: the new owner of the index. This function is a no-op if it is equal to sender.
        /// 
        /// Emits `IndexAssigned` if successful.
        /// 
        /// # <weight>
        /// - `O(1)`.
        /// - One storage mutation (codec `O(1)`).
        /// - One transfer operation.
        /// - One event.
        /// -------------------
        /// - DB Weight:
        ///    - Reads: Indices Accounts, System Account (recipient)
        ///    - Writes: Indices Accounts, System Account (recipient)
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall Transfer(SubstrateNetApi.Model.SpCore.AccountId32 @new, SubstrateNetApi.Model.Types.Primitive.U32 index)
        {
            return new GenericExtrinsicCall("Indices", "transfer", @new, index);
        }
        
        /// <summary>
        /// >> Extrinsic: free
        /// Free up an index owned by the sender.
        /// 
        /// Payment: Any previous deposit placed for the index is unreserved in the sender account.
        /// 
        /// The dispatch origin for this call must be _Signed_ and the sender must own the index.
        /// 
        /// - `index`: the index to be freed. This must be owned by the sender.
        /// 
        /// Emits `IndexFreed` if successful.
        /// 
        /// # <weight>
        /// - `O(1)`.
        /// - One storage mutation (codec `O(1)`).
        /// - One reserve operation.
        /// - One event.
        /// -------------------
        /// - DB Weight: 1 Read/Write (Accounts)
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall Free(SubstrateNetApi.Model.Types.Primitive.U32 index)
        {
            return new GenericExtrinsicCall("Indices", "free", index);
        }
        
        /// <summary>
        /// >> Extrinsic: force_transfer
        /// Force an index to an account. This doesn't require a deposit. If the index is already
        /// held, then any deposit is reimbursed to its current owner.
        /// 
        /// The dispatch origin for this call must be _Root_.
        /// 
        /// - `index`: the index to be (re-)assigned.
        /// - `new`: the new owner of the index. This function is a no-op if it is equal to sender.
        /// - `freeze`: if set to `true`, will freeze the index so it cannot be transferred.
        /// 
        /// Emits `IndexAssigned` if successful.
        /// 
        /// # <weight>
        /// - `O(1)`.
        /// - One storage mutation (codec `O(1)`).
        /// - Up to one reserve operation.
        /// - One event.
        /// -------------------
        /// - DB Weight:
        ///    - Reads: Indices Accounts, System Account (original owner)
        ///    - Writes: Indices Accounts, System Account (original owner)
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall ForceTransfer(SubstrateNetApi.Model.SpCore.AccountId32 @new, SubstrateNetApi.Model.Types.Primitive.U32 index, SubstrateNetApi.Model.Types.Primitive.Bool freeze)
        {
            return new GenericExtrinsicCall("Indices", "force_transfer", @new, index, freeze);
        }
        
        /// <summary>
        /// >> Extrinsic: freeze
        /// Freeze an index so it will always point to the sender account. This consumes the
        /// deposit.
        /// 
        /// The dispatch origin for this call must be _Signed_ and the signing account must have a
        /// non-frozen account `index`.
        /// 
        /// - `index`: the index to be frozen in place.
        /// 
        /// Emits `IndexFrozen` if successful.
        /// 
        /// # <weight>
        /// - `O(1)`.
        /// - One storage mutation (codec `O(1)`).
        /// - Up to one slash operation.
        /// - One event.
        /// -------------------
        /// - DB Weight: 1 Read/Write (Accounts)
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall Freeze(SubstrateNetApi.Model.Types.Primitive.U32 index)
        {
            return new GenericExtrinsicCall("Indices", "freeze", index);
        }
    }
}
