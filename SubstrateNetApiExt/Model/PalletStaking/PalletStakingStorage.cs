//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletStaking;
using SubstrateNetApi.Model.SpArithmetic;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletStaking
{
    
    
    public sealed class PalletStakingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public PalletStakingStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> HistoryDepth
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> HistoryDepth(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "HistoryDepth", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ValidatorCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> ValidatorCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "ValidatorCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> MinimumValidatorCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> MinimumValidatorCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "MinimumValidatorCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> Invulnerables
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>> Invulnerables(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "Invulnerables", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>(parameters, token);
        }
        
        /// <summary>
        /// >> Bonded
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> Bonded(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "Bonded", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> MinNominatorBond
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> MinNominatorBond(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "MinNominatorBond", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> MinValidatorBond
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> MinValidatorBond(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "MinValidatorBond", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> Ledger
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.StakingLedger> Ledger(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "Ledger", Storage.Type.Map, new[] {Storage.Hasher.BlakeTwo128Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.StakingLedger>(parameters, token);
        }
        
        /// <summary>
        /// >> Payee
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.EnumRewardDestination> Payee(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "Payee", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.EnumRewardDestination>(parameters, token);
        }
        
        /// <summary>
        /// >> Validators
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.ValidatorPrefs> Validators(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "Validators", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.ValidatorPrefs>(parameters, token);
        }
        
        /// <summary>
        /// >> CounterForValidators
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> CounterForValidators(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "CounterForValidators", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> MaxValidatorsCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> MaxValidatorsCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "MaxValidatorsCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> Nominators
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.Nominations> Nominators(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "Nominators", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.Nominations>(parameters, token);
        }
        
        /// <summary>
        /// >> CounterForNominators
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> CounterForNominators(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "CounterForNominators", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> MaxNominatorsCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> MaxNominatorsCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "MaxNominatorsCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> CurrentEra
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> CurrentEra(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "CurrentEra", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ActiveEra
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.ActiveEraInfo> ActiveEra(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "ActiveEra", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.ActiveEraInfo>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasStartSessionIndex
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> ErasStartSessionIndex(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "ErasStartSessionIndex", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasStakers
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.Exposure> ErasStakers(BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Staking", "ErasStakers", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.Exposure>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasStakersClipped
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.Exposure> ErasStakersClipped(BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Staking", "ErasStakersClipped", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.Exposure>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasValidatorPrefs
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.ValidatorPrefs> ErasValidatorPrefs(BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Staking", "ErasValidatorPrefs", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.ValidatorPrefs>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasValidatorReward
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> ErasValidatorReward(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "ErasValidatorReward", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasRewardPoints
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.EraRewardPoints> ErasRewardPoints(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "ErasRewardPoints", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.EraRewardPoints>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasTotalStake
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> ErasTotalStake(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "ErasTotalStake", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> ForceEra
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.EnumForcing> ForceEra(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "ForceEra", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.EnumForcing>(parameters, token);
        }
        
        /// <summary>
        /// >> SlashRewardFraction
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpArithmetic.Perbill> SlashRewardFraction(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "SlashRewardFraction", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpArithmetic.Perbill>(parameters, token);
        }
        
        /// <summary>
        /// >> CanceledSlashPayout
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> CanceledSlashPayout(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "CanceledSlashPayout", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> UnappliedSlashes
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletStaking.UnappliedSlash>> UnappliedSlashes(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "UnappliedSlashes", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletStaking.UnappliedSlash>>(parameters, token);
        }
        
        /// <summary>
        /// >> BondedEras
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>>> BondedEras(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "BondedEras", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>>>(parameters, token);
        }
        
        /// <summary>
        /// >> ValidatorSlashInEra
        /// </summary>
        public async Task<BaseTuple<SubstrateNetApi.Model.SpArithmetic.Perbill,SubstrateNetApi.Model.Types.Primitive.U128>> ValidatorSlashInEra(BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Staking", "ValidatorSlashInEra", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<BaseTuple<SubstrateNetApi.Model.SpArithmetic.Perbill,SubstrateNetApi.Model.Types.Primitive.U128>>(parameters, token);
        }
        
        /// <summary>
        /// >> NominatorSlashInEra
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> NominatorSlashInEra(BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Staking", "NominatorSlashInEra", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> SlashingSpans
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.SlashingSpans> SlashingSpans(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "SlashingSpans", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.SlashingSpans>(parameters, token);
        }
        
        /// <summary>
        /// >> SpanSlash
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.SpanRecord> SpanSlash(BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.Types.Primitive.U32> key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "SpanSlash", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.SpanRecord>(parameters, token);
        }
        
        /// <summary>
        /// >> EarliestUnappliedSlash
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> EarliestUnappliedSlash(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "EarliestUnappliedSlash", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> CurrentPlannedSession
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> CurrentPlannedSession(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "CurrentPlannedSession", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> StorageVersion
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.EnumReleases> StorageVersion(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "StorageVersion", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.EnumReleases>(parameters, token);
        }
        
        /// <summary>
        /// >> ChillThreshold
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpArithmetic.Percent> ChillThreshold(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "ChillThreshold", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpArithmetic.Percent>(parameters, token);
        }
    }
}
