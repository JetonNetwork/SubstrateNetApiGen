//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Calls;
using SubstrateNetApi.Model.Types.Base;
using System;
using System.Collections.Generic;


namespace SubstrateNetApi.Model.PalletSession
{
    
    
    /// <summary>
    /// >> Path: pallet_session.Call
    /// Dispatchable calls.
    /// 
    /// Each variant of this enum maps to a dispatchable function from the associated module.
    /// </summary>
    public sealed class PalletSessionCall
    {
        
        /// <summary>
        /// >> Extrinsic: set_keys
        /// Sets the session key(s) of the function caller to `keys`.
        /// Allows an account to set its session key prior to becoming a validator.
        /// This doesn't take effect until the next session.
        /// 
        /// The dispatch origin of this function must be signed.
        /// 
        /// # <weight>
        /// - Complexity: `O(1)`
        ///   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.
        /// - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`
        /// - DbWrites: `origin account`, `NextKeys`
        /// - DbReads per key id: `KeyOwner`
        /// - DbWrites per key id: `KeyOwner`
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall SetKeys(SubstrateNetApi.Model.NodeRuntime.SessionKeys keys, BaseVec<SubstrateNetApi.Model.Types.Primitive.U8> proof)
        {
            return new GenericExtrinsicCall("Session", "set_keys", keys, proof);
        }
        
        /// <summary>
        /// >> Extrinsic: purge_keys
        /// Removes any session key(s) of the function caller.
        /// This doesn't take effect until the next session.
        /// 
        /// The dispatch origin of this function must be signed.
        /// 
        /// # <weight>
        /// - Complexity: `O(1)` in number of key types.
        ///   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.
        /// - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`
        /// - DbWrites: `NextKeys`, `origin account`
        /// - DbWrites per key id: `KeyOwner`
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall PurgeKeys()
        {
            return new GenericExtrinsicCall("Session", "purge_keys");
        }
    }
}
