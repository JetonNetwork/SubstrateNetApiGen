//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletSociety;
using SubstrateNetApi.Model.PrimitiveTypes;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletSociety
{
    
    
    public sealed class PalletSocietyStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public PalletSocietyStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> Founder
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> Founder(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Founder", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> Rules
        /// </summary>
        public async Task<SubstrateNetApi.Model.PrimitiveTypes.H256> Rules(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Rules", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PrimitiveTypes.H256>(parameters, token);
        }
        
        /// <summary>
        /// >> Candidates
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletSociety.Bid>> Candidates(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Candidates", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletSociety.Bid>>(parameters, token);
        }
        
        /// <summary>
        /// >> SuspendedCandidates
        /// </summary>
        public async Task<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U128,SubstrateNetApi.Model.PalletSociety.EnumBidKind>> SuspendedCandidates(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "SuspendedCandidates", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U128,SubstrateNetApi.Model.PalletSociety.EnumBidKind>>(parameters, token);
        }
        
        /// <summary>
        /// >> Pot
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> Pot(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Pot", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> Head
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> Head(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Head", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> Members
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>> Members(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Members", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>(parameters, token);
        }
        
        /// <summary>
        /// >> SuspendedMembers
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.Bool> SuspendedMembers(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "SuspendedMembers", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
        
        /// <summary>
        /// >> Bids
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletSociety.Bid>> Bids(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Bids", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletSociety.Bid>>(parameters, token);
        }
        
        /// <summary>
        /// >> Vouching
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletSociety.EnumVouchingStatus> Vouching(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "Vouching", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletSociety.EnumVouchingStatus>(parameters, token);
        }
        
        /// <summary>
        /// >> Payouts
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U128>>> Payouts(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "Payouts", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U128>>>(parameters, token);
        }
        
        /// <summary>
        /// >> Strikes
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> Strikes(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "Strikes", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> Votes
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletSociety.EnumVote> Votes(BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Society", "Votes", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletSociety.EnumVote>(parameters, token);
        }
        
        /// <summary>
        /// >> Defender
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> Defender(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Defender", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> DefenderVotes
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletSociety.EnumVote> DefenderVotes(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "DefenderVotes", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletSociety.EnumVote>(parameters, token);
        }
        
        /// <summary>
        /// >> MaxMembers
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> MaxMembers(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "MaxMembers", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
    }
}
