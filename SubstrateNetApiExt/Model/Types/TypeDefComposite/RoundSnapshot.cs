//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using SubstrateNetApi.Model.Types.TypeDefArray;
using SubstrateNetApi.Model.Types.TypeDefComposite;
using SubstrateNetApi.Model.Types.TypeDefVariant;
using System;
using System.Collections.Generic;


namespace SubstrateNetApi.Model.Types.TypeDefComposite
{
    
    
    public sealed class RoundSnapshot : BaseType
    {
        
        private BaseVec<BaseTuple<AccountId32,U64,BaseVec<AccountId32>>> _voters;
        
        private BaseVec<AccountId32> _targets;
        
        public BaseVec<BaseTuple<AccountId32,U64,BaseVec<AccountId32>>> Voters
        {
            get
            {
                return this._voters;
            }
            set
            {
                this._voters = value;
            }
        }
        
        public BaseVec<AccountId32> Targets
        {
            get
            {
                return this._targets;
            }
            set
            {
                this._targets = value;
            }
        }
        
        public override string TypeName()
        {
            return "RoundSnapshot";
        }
        
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Voters.Encode());
            result.AddRange(Targets.Encode());
            return result.ToArray();
        }
        
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Voters = new BaseVec<BaseTuple<AccountId32,U64,BaseVec<AccountId32>>>();
            Voters.Decode(byteArray, ref p);
            Targets = new BaseVec<AccountId32>();
            Targets.Decode(byteArray, ref p);
            _typeSize = p - start;
        }
    }
}
