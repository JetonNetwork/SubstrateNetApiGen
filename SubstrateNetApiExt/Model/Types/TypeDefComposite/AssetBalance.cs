//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using SubstrateNetApi.Model.Types.TypeDefArray;
using SubstrateNetApi.Model.Types.TypeDefComposite;
using SubstrateNetApi.Model.Types.TypeDefVariant;
using System;
using System.Collections.Generic;


namespace SubstrateNetApi.Model.Types.TypeDefComposite
{
    
    
    public sealed class AssetBalance : BaseType
    {
        
        private U64 _balance;
        
        private Bool _isFrozen;
        
        private Bool _sufficient;
        
        private BaseTuple _extra;
        
        public U64 Balance
        {
            get
            {
                return this._balance;
            }
            set
            {
                this._balance = value;
            }
        }
        
        public Bool IsFrozen
        {
            get
            {
                return this._isFrozen;
            }
            set
            {
                this._isFrozen = value;
            }
        }
        
        public Bool Sufficient
        {
            get
            {
                return this._sufficient;
            }
            set
            {
                this._sufficient = value;
            }
        }
        
        public BaseTuple Extra
        {
            get
            {
                return this._extra;
            }
            set
            {
                this._extra = value;
            }
        }
        
        public override string TypeName()
        {
            return "AssetBalance";
        }
        
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Balance.Encode());
            result.AddRange(IsFrozen.Encode());
            result.AddRange(Sufficient.Encode());
            result.AddRange(Extra.Encode());
            return result.ToArray();
        }
        
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Balance = new U64();
            Balance.Decode(byteArray, ref p);
            IsFrozen = new Bool();
            IsFrozen.Decode(byteArray, ref p);
            Sufficient = new Bool();
            Sufficient.Decode(byteArray, ref p);
            Extra = new BaseTuple();
            Extra.Decode(byteArray, ref p);
            _typeSize = p - start;
        }
    }
}
