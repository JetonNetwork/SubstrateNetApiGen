//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Composite;
using SubstrateNetApi.Model.Types.Enum;
using SubstrateNetApi.Model.Types.Primitive;
using SubstrateNetApi.Model.Types.Sequence;
using System;
using System.Collections.Generic;


namespace SubstrateNetApi.Model.Types.Composite
{
    
    
    /// <summary>
    /// >> Path: pallet_transaction_storage.TransactionInfo
    /// </summary>
    public sealed class TransactionInfo : BaseType
    {
        
        private H256 _chunkRoot;
        
        private H256 _contentHash;
        
        private U32 _size;
        
        private U32 _blockChunks;
        
        public H256 ChunkRoot
        {
            get
            {
                return this._chunkRoot;
            }
            set
            {
                this._chunkRoot = value;
            }
        }
        
        public H256 ContentHash
        {
            get
            {
                return this._contentHash;
            }
            set
            {
                this._contentHash = value;
            }
        }
        
        public U32 Size
        {
            get
            {
                return this._size;
            }
            set
            {
                this._size = value;
            }
        }
        
        public U32 BlockChunks
        {
            get
            {
                return this._blockChunks;
            }
            set
            {
                this._blockChunks = value;
            }
        }
        
        public override string TypeName()
        {
            return "TransactionInfo";
        }
        
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(ChunkRoot.Encode());
            result.AddRange(ContentHash.Encode());
            result.AddRange(Size.Encode());
            result.AddRange(BlockChunks.Encode());
            return result.ToArray();
        }
        
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            ChunkRoot = new H256();
            ChunkRoot.Decode(byteArray, ref p);
            ContentHash = new H256();
            ContentHash.Decode(byteArray, ref p);
            Size = new U32();
            Size.Decode(byteArray, ref p);
            BlockChunks = new U32();
            BlockChunks.Decode(byteArray, ref p);
            _typeSize = p - start;
        }
    }
}
