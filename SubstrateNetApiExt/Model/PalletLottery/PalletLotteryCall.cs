//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Calls;
using SubstrateNetApi.Model.Types.Base;
using System;
using System.Collections.Generic;


namespace SubstrateNetApi.Model.PalletLottery
{
    
    
    /// <summary>
    /// >> Path: pallet_lottery.pallet.Call
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public sealed class PalletLotteryCall
    {
        
        /// <summary>
        /// >> Extrinsic: buy_ticket
        /// Buy a ticket to enter the lottery.
        /// 
        /// This extrinsic acts as a passthrough function for `call`. In all
        /// situations where `call` alone would succeed, this extrinsic should
        /// succeed.
        /// 
        /// If `call` is successful, then we will attempt to purchase a ticket,
        /// which may fail silently. To detect success of a ticket purchase, you
        /// should listen for the `TicketBought` event.
        /// 
        /// This extrinsic must be called by a signed origin.
        /// </summary>
        public GenericExtrinsicCall BuyTicket(SubstrateNetApi.Model.NodeRuntime.EnumNodeCall call)
        {
            return new GenericExtrinsicCall("Lottery", "buy_ticket", call);
        }
        
        /// <summary>
        /// >> Extrinsic: set_calls
        /// Set calls in storage which can be used to purchase a lottery ticket.
        /// 
        /// This function only matters if you use the `ValidateCall` implementation
        /// provided by this pallet, which uses storage to determine the valid calls.
        /// 
        /// This extrinsic must be called by the Manager origin.
        /// </summary>
        public GenericExtrinsicCall SetCalls(BaseVec<SubstrateNetApi.Model.NodeRuntime.EnumNodeCall> calls)
        {
            return new GenericExtrinsicCall("Lottery", "set_calls", calls);
        }
        
        /// <summary>
        /// >> Extrinsic: start_lottery
        /// Start a lottery using the provided configuration.
        /// 
        /// This extrinsic must be called by the `ManagerOrigin`.
        /// 
        /// Parameters:
        /// 
        /// * `price`: The cost of a single ticket.
        /// * `length`: How long the lottery should run for starting at the current block.
        /// * `delay`: How long after the lottery end we should wait before picking a winner.
        /// * `repeat`: If the lottery should repeat when completed.
        /// </summary>
        public GenericExtrinsicCall StartLottery(SubstrateNetApi.Model.Types.Primitive.U128 price, SubstrateNetApi.Model.Types.Primitive.U32 length, SubstrateNetApi.Model.Types.Primitive.U32 delay, SubstrateNetApi.Model.Types.Primitive.Bool repeat)
        {
            return new GenericExtrinsicCall("Lottery", "start_lottery", price, length, delay, repeat);
        }
        
        /// <summary>
        /// >> Extrinsic: stop_repeat
        /// If a lottery is repeating, you can use this to stop the repeat.
        /// The lottery will continue to run to completion.
        /// 
        /// This extrinsic must be called by the `ManagerOrigin`.
        /// </summary>
        public GenericExtrinsicCall StopRepeat()
        {
            return new GenericExtrinsicCall("Lottery", "stop_repeat");
        }
    }
}
