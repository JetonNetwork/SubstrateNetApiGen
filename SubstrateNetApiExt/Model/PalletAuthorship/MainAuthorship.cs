//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Extrinsics;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletAuthorship;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.SpRuntime;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletAuthorship
{
    
    
    public sealed class AuthorshipStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public AuthorshipStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        public static string UnclesParams()
        {
            return RequestGenerator.GetStorage("Authorship", "Uncles", SubstrateNetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Uncles
        ///  Uncles
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletAuthorship.EnumUncleEntryItem>> Uncles(CancellationToken token)
        {
            string parameters = AuthorshipStorage.UnclesParams();
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletAuthorship.EnumUncleEntryItem>>(parameters, token);
        }
        
        public static string AuthorParams()
        {
            return RequestGenerator.GetStorage("Authorship", "Author", SubstrateNetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Author
        ///  Author of current block.
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> Author(CancellationToken token)
        {
            string parameters = AuthorshipStorage.AuthorParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
        
        public static string DidSetUnclesParams()
        {
            return RequestGenerator.GetStorage("Authorship", "DidSetUncles", SubstrateNetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DidSetUncles
        ///  Whether uncles were already set in this block.
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.Bool> DidSetUncles(CancellationToken token)
        {
            string parameters = AuthorshipStorage.DidSetUnclesParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
    }
    
    public sealed class AuthorshipCalls
    {
        
        /// <summary>
        /// >> set_uncles
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetUncles(BaseVec<SubstrateNetApi.Model.SpRuntime.Header> new_uncles)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_uncles.Encode());
            return new Method(4, "Authorship", 0, "set_uncles", byteArray.ToArray());
        }
    }
    
    public enum AuthorshipErrors
    {
        
        /// <summary>
        /// >> InvalidUncleParent
        /// The uncle parent not in the chain.
        /// </summary>
        InvalidUncleParent,
        
        /// <summary>
        /// >> UnclesAlreadySet
        /// Uncles already set in the block.
        /// </summary>
        UnclesAlreadySet,
        
        /// <summary>
        /// >> TooManyUncles
        /// Too many uncles.
        /// </summary>
        TooManyUncles,
        
        /// <summary>
        /// >> GenesisUncle
        /// The uncle is genesis.
        /// </summary>
        GenesisUncle,
        
        /// <summary>
        /// >> TooHighUncle
        /// The uncle is too high in chain.
        /// </summary>
        TooHighUncle,
        
        /// <summary>
        /// >> UncleAlreadyIncluded
        /// The uncle is already included.
        /// </summary>
        UncleAlreadyIncluded,
        
        /// <summary>
        /// >> OldUncle
        /// The uncle isn't recent enough to be included.
        /// </summary>
        OldUncle,
    }
}
