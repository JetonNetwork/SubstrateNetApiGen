//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Base;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.SpConsensusBabe;
using SubstrateNetApi.Model.SpConsensusSlots;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletBabe
{
    
    
    public sealed class PalletBabeStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public PalletBabeStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> EpochIndex
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U64> EpochIndex(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "EpochIndex", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U64>(parameters, token);
        }
        
        /// <summary>
        /// >> Authorities
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.SpConsensusBabe.Public,SubstrateNetApi.Model.Types.Primitive.U64>>> Authorities(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "Authorities", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.SpConsensusBabe.Public,SubstrateNetApi.Model.Types.Primitive.U64>>>(parameters, token);
        }
        
        /// <summary>
        /// >> GenesisSlot
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpConsensusSlots.Slot> GenesisSlot(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "GenesisSlot", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpConsensusSlots.Slot>(parameters, token);
        }
        
        /// <summary>
        /// >> CurrentSlot
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpConsensusSlots.Slot> CurrentSlot(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "CurrentSlot", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpConsensusSlots.Slot>(parameters, token);
        }
        
        /// <summary>
        /// >> Randomness
        /// </summary>
        public async Task<SubstrateNetApi.Model.Base.Arr32U8> Randomness(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "Randomness", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Base.Arr32U8>(parameters, token);
        }
        
        /// <summary>
        /// >> PendingEpochConfigChange
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpConsensusBabe.EnumNextConfigDescriptor> PendingEpochConfigChange(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "PendingEpochConfigChange", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpConsensusBabe.EnumNextConfigDescriptor>(parameters, token);
        }
        
        /// <summary>
        /// >> NextRandomness
        /// </summary>
        public async Task<SubstrateNetApi.Model.Base.Arr32U8> NextRandomness(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "NextRandomness", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Base.Arr32U8>(parameters, token);
        }
        
        /// <summary>
        /// >> NextAuthorities
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.SpConsensusBabe.Public,SubstrateNetApi.Model.Types.Primitive.U64>>> NextAuthorities(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "NextAuthorities", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.SpConsensusBabe.Public,SubstrateNetApi.Model.Types.Primitive.U64>>>(parameters, token);
        }
        
        /// <summary>
        /// >> SegmentIndex
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> SegmentIndex(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "SegmentIndex", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> UnderConstruction
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.Base.Arr32U8>> UnderConstruction(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Babe", "UnderConstruction", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.Base.Arr32U8>>(parameters, token);
        }
        
        /// <summary>
        /// >> Initialized
        /// </summary>
        public async Task<BaseOpt<SubstrateNetApi.Model.Base.Arr32U8>> Initialized(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "Initialized", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseOpt<SubstrateNetApi.Model.Base.Arr32U8>>(parameters, token);
        }
        
        /// <summary>
        /// >> AuthorVrfRandomness
        /// </summary>
        public async Task<BaseOpt<SubstrateNetApi.Model.Base.Arr32U8>> AuthorVrfRandomness(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "AuthorVrfRandomness", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseOpt<SubstrateNetApi.Model.Base.Arr32U8>>(parameters, token);
        }
        
        /// <summary>
        /// >> EpochStart
        /// </summary>
        public async Task<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>> EpochStart(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "EpochStart", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>>(parameters, token);
        }
        
        /// <summary>
        /// >> Lateness
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> Lateness(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "Lateness", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> EpochConfig
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpConsensusBabe.BabeEpochConfiguration> EpochConfig(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "EpochConfig", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpConsensusBabe.BabeEpochConfiguration>(parameters, token);
        }
        
        /// <summary>
        /// >> NextEpochConfig
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpConsensusBabe.BabeEpochConfiguration> NextEpochConfig(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Babe", "NextEpochConfig", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpConsensusBabe.BabeEpochConfiguration>(parameters, token);
        }
    }
}
