//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletGrandpa;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletGrandpa
{
    
    
    public sealed class PalletGrandpaStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public PalletGrandpaStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> State
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletGrandpa.EnumStoredState> State(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Grandpa", "State", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletGrandpa.EnumStoredState>(parameters, token);
        }
        
        /// <summary>
        /// >> PendingChange
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletGrandpa.StoredPendingChange> PendingChange(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Grandpa", "PendingChange", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletGrandpa.StoredPendingChange>(parameters, token);
        }
        
        /// <summary>
        /// >> NextForced
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> NextForced(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Grandpa", "NextForced", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> Stalled
        /// </summary>
        public async Task<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>> Stalled(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Grandpa", "Stalled", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>>(parameters, token);
        }
        
        /// <summary>
        /// >> CurrentSetId
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U64> CurrentSetId(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Grandpa", "CurrentSetId", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U64>(parameters, token);
        }
        
        /// <summary>
        /// >> SetIdSession
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> SetIdSession(SubstrateNetApi.Model.Types.Primitive.U64 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Grandpa", "SetIdSession", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
    }
}
