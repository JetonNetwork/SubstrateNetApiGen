//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Calls;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using SubstrateNetApi.Model.Types.TypeDefArray;
using SubstrateNetApi.Model.Types.TypeDefComposite;
using SubstrateNetApi.Model.Types.TypeDefVariant;
using System;
using System.Collections.Generic;


namespace SubstrateNetApi.Model.Custom.Calls
{
    
    
    /// <summary>
    /// >> Path: pallet_elections_phragmen.pallet.Call
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public sealed class PalletElectionsPhragmen
    {
        
        /// <summary>
        /// >> Extrinsic: vote
        /// Vote for a set of candidates for the upcoming round of election. This can be called to
        /// set the initial votes, or update already existing votes.
        /// 
        /// Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is
        /// reserved. The deposit is based on the number of votes and can be updated over time.
        /// 
        /// The `votes` should:
        ///   - not be empty.
        ///   - be less than the number of possible candidates. Note that all current members and
        ///     runners-up are also automatically candidates for the next round.
        /// 
        /// If `value` is more than `who`'s total balance, then the maximum of the two is used.
        /// 
        /// The dispatch origin of this call must be signed.
        /// 
        /// ### Warning
        /// 
        /// It is the responsibility of the caller to **NOT** place all of their balance into the
        /// lock and keep some for further operations.
        /// 
        /// # <weight>
        /// We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall Vote(BaseVec<AccountId32> votes, BaseCom<U128> value)
        {
            return new GenericExtrinsicCall("ElectionsPhragmen", "vote", votes, value);
        }
        
        /// <summary>
        /// >> Extrinsic: remove_voter
        /// Remove `origin` as a voter.
        /// 
        /// This removes the lock and returns the deposit.
        /// 
        /// The dispatch origin of this call must be signed and be a voter.
        /// </summary>
        public GenericExtrinsicCall RemoveVoter()
        {
            return new GenericExtrinsicCall("ElectionsPhragmen", "remove_voter");
        }
        
        /// <summary>
        /// >> Extrinsic: submit_candidacy
        /// Submit oneself for candidacy. A fixed amount of deposit is recorded.
        /// 
        /// All candidates are wiped at the end of the term. They either become a member/runner-up,
        /// or leave the system while their deposit is slashed.
        /// 
        /// The dispatch origin of this call must be signed.
        /// 
        /// ### Warning
        /// 
        /// Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]
        /// to get their deposit back. Losing the spot in an election will always lead to a slash.
        /// 
        /// # <weight>
        /// The number of current candidates must be provided as witness data.
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall SubmitCandidacy(BaseCom<U32> candidate_count)
        {
            return new GenericExtrinsicCall("ElectionsPhragmen", "submit_candidacy", candidate_count);
        }
        
        /// <summary>
        /// >> Extrinsic: renounce_candidacy
        /// Renounce one's intention to be a candidate for the next election round. 3 potential
        /// outcomes exist:
        /// 
        /// - `origin` is a candidate and not elected in any set. In this case, the deposit is
        ///   unreserved, returned and origin is removed as a candidate.
        /// - `origin` is a current runner-up. In this case, the deposit is unreserved, returned and
        ///   origin is removed as a runner-up.
        /// - `origin` is a current member. In this case, the deposit is unreserved and origin is
        ///   removed as a member, consequently not being a candidate for the next round anymore.
        ///   Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they
        ///   are immediately used. If the prime is renouncing, then no prime will exist until the
        ///   next round.
        /// 
        /// The dispatch origin of this call must be signed, and have one of the above roles.
        /// 
        /// # <weight>
        /// The type of renouncing must be provided as witness data.
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall RenounceCandidacy(EnumRenouncing renouncing)
        {
            return new GenericExtrinsicCall("ElectionsPhragmen", "renounce_candidacy", renouncing);
        }
        
        /// <summary>
        /// >> Extrinsic: remove_member
        /// Remove a particular member from the set. This is effective immediately and the bond of
        /// the outgoing member is slashed.
        /// 
        /// If a runner-up is available, then the best runner-up will be removed and replaces the
        /// outgoing member. Otherwise, a new phragmen election is started.
        /// 
        /// The dispatch origin of this call must be root.
        /// 
        /// Note that this does not affect the designated block number of the next election.
        /// 
        /// # <weight>
        /// If we have a replacement, we use a small weight. Else, since this is a root call and
        /// will go into phragmen, we assume full block for now.
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall RemoveMember(EnumMultiAddress who, Bool has_replacement)
        {
            return new GenericExtrinsicCall("ElectionsPhragmen", "remove_member", who, has_replacement);
        }
        
        /// <summary>
        /// >> Extrinsic: clean_defunct_voters
        /// Clean all voters who are defunct (i.e. they do not serve any purpose at all). The
        /// deposit of the removed voters are returned.
        /// 
        /// This is an root function to be used only for cleaning the state.
        /// 
        /// The dispatch origin of this call must be root.
        /// 
        /// # <weight>
        /// The total number of voters and those that are defunct must be provided as witness data.
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall CleanDefunctVoters(U32 num_voters, U32 num_defunct)
        {
            return new GenericExtrinsicCall("ElectionsPhragmen", "clean_defunct_voters", num_voters, num_defunct);
        }
    }
}
