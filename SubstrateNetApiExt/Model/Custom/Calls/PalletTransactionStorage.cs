//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Calls;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using SubstrateNetApi.Model.Types.TypeDefArray;
using SubstrateNetApi.Model.Types.TypeDefComposite;
using SubstrateNetApi.Model.Types.TypeDefVariant;
using System;
using System.Collections.Generic;


namespace SubstrateNetApi.Model.Custom.Calls
{
    
    
    /// <summary>
    /// >> Path: pallet_transaction_storage.pallet.Call
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public sealed class PalletTransactionStorage
    {
        
        /// <summary>
        /// >> Extrinsic: store
        /// Index and store data on chain. Minimum data size is 1 bytes, maximum is
        /// `MaxTransactionSize`. Data will be removed after `STORAGE_PERIOD` blocks, unless `renew`
        /// is called. # <weight>
        /// - n*log(n) of data size, as all data is pushed to an in-memory trie.
        /// Additionally contains a DB write.
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall Store(BaseVec<U8> data)
        {
            return new GenericExtrinsicCall("TransactionStorage", "store", data);
        }
        
        /// <summary>
        /// >> Extrinsic: renew
        /// Renew previously stored data. Parameters are the block number that contains
        /// previous `store` or `renew` call and transaction index within that block.
        /// Transaction index is emitted in the `Stored` or `Renewed` event.
        /// Applies same fees as `store`.
        /// # <weight>
        /// - Constant.
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall Renew(U32 block, U32 index)
        {
            return new GenericExtrinsicCall("TransactionStorage", "renew", block, index);
        }
        
        /// <summary>
        /// >> Extrinsic: check_proof
        /// Check storage proof for block number `block_number() - StoragePeriod`.
        /// If such block does not exist the proof is expected to be `None`.
        /// # <weight>
        /// - Linear w.r.t the number of indexed transactions in the proved block for random
        ///   probing.
        /// There's a DB read for each transaction.
        /// Here we assume a maximum of 100 probed transactions.
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall CheckProof(TransactionStorageProof proof)
        {
            return new GenericExtrinsicCall("TransactionStorage", "check_proof", proof);
        }
    }
}
