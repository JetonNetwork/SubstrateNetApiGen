//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Calls;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Composite;
using SubstrateNetApi.Model.Types.Enum;
using SubstrateNetApi.Model.Types.Primitive;
using SubstrateNetApi.Model.Types.Sequence;
using System;
using System.Collections.Generic;


namespace SubstrateNetApi.Model.Custom.Calls
{
    
    
    /// <summary>
    /// >> Path: pallet_balances.pallet.Call
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public sealed class PalletBalances
    {
        
        /// <summary>
        /// >> Extrinsic: transfer
        /// Transfer some liquid free balance to another account.
        /// 
        /// `transfer` will set the `FreeBalance` of the sender and receiver.
        /// It will decrease the total issuance of the system by the `TransferFee`.
        /// If the sender's account is below the existential deposit as a result
        /// of the transfer, the account will be reaped.
        /// 
        /// The dispatch origin for this call must be `Signed` by the transactor.
        /// 
        /// # <weight>
        /// - Dependent on arguments but not critical, given proper implementations for input config
        ///   types. See related functions below.
        /// - It contains a limited number of reads and writes internally and no complex
        ///   computation.
        /// 
        /// Related functions:
        /// 
        ///   - `ensure_can_withdraw` is always called internally but has a bounded complexity.
        ///   - Transferring balances to accounts that did not exist before will cause
        ///     `T::OnNewAccount::on_new_account` to be called.
        ///   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.
        ///   - `transfer_keep_alive` works the same way as `transfer`, but has an additional check
        ///     that the transfer will not kill the origin account.
        /// ---------------------------------
        /// - Base Weight: 73.64 ��s, worst case scenario (account created, account removed)
        /// - DB Weight: 1 Read and 1 Write to destination account
        /// - Origin account is already in memory, so no DB operations for them.
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall Transfer(EnumMultiAddress dest, BaseCom<U128> value)
        {
            return new GenericExtrinsicCall("Balances", "transfer", dest, value);
        }
        
        /// <summary>
        /// >> Extrinsic: set_balance
        /// Set the balances of a given account.
        /// 
        /// This will alter `FreeBalance` and `ReservedBalance` in storage. it will
        /// also decrease the total issuance of the system (`TotalIssuance`).
        /// If the new free or reserved balance is below the existential deposit,
        /// it will reset the account nonce (`frame_system::AccountNonce`).
        /// 
        /// The dispatch origin for this call is `root`.
        /// 
        /// # <weight>
        /// - Independent of the arguments.
        /// - Contains a limited number of reads and writes.
        /// ---------------------
        /// - Base Weight:
        ///     - Creating: 27.56 ��s
        ///     - Killing: 35.11 ��s
        /// - DB Weight: 1 Read, 1 Write to `who`
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall SetBalance(EnumMultiAddress who, BaseCom<U128> new_free, BaseCom<U128> new_reserved)
        {
            return new GenericExtrinsicCall("Balances", "set_balance", who, new_free, new_reserved);
        }
        
        /// <summary>
        /// >> Extrinsic: force_transfer
        /// Exactly as `transfer`, except the origin must be root and the source account may be
        /// specified.
        /// # <weight>
        /// - Same as transfer, but additional read and write because the source account is not
        ///   assumed to be in the overlay.
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall ForceTransfer(EnumMultiAddress source, EnumMultiAddress dest, BaseCom<U128> value)
        {
            return new GenericExtrinsicCall("Balances", "force_transfer", source, dest, value);
        }
        
        /// <summary>
        /// >> Extrinsic: transfer_keep_alive
        /// Same as the [`transfer`] call, but with a check that the transfer will not kill the
        /// origin account.
        /// 
        /// 99% of the time you want [`transfer`] instead.
        /// 
        /// [`transfer`]: struct.Pallet.html#method.transfer
        /// # <weight>
        /// - Cheaper than transfer because account cannot be killed.
        /// - Base Weight: 51.4 ��s
        /// - DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)
        /// #</weight>
        /// </summary>
        public GenericExtrinsicCall TransferKeepAlive(EnumMultiAddress dest, BaseCom<U128> value)
        {
            return new GenericExtrinsicCall("Balances", "transfer_keep_alive", dest, value);
        }
        
        /// <summary>
        /// >> Extrinsic: transfer_all
        /// Transfer the entire transferable balance from the caller account.
        /// 
        /// NOTE: This function only attempts to transfer _transferable_ balances. This means that
        /// any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be
        /// transferred by this function. To ensure that this function results in a killed account,
        /// you might need to prepare the account by removing any reference counters, storage
        /// deposits, etc...
        /// 
        /// The dispatch origin of this call must be Signed.
        /// 
        /// - `dest`: The recipient of the transfer.
        /// - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all
        ///   of the funds the account has, causing the sender account to be killed (false), or
        ///   transfer everything except at least the existential deposit, which will guarantee to
        ///   keep the sender account alive (true). # <weight>
        /// - O(1). Just like transfer, but reading the user's transferable balance first.
        ///   #</weight>
        /// </summary>
        public GenericExtrinsicCall TransferAll(EnumMultiAddress dest, Bool keep_alive)
        {
            return new GenericExtrinsicCall("Balances", "transfer_all", dest, keep_alive);
        }
        
        /// <summary>
        /// >> Extrinsic: force_unreserve
        /// Unreserve some balance from a user by force.
        /// 
        /// Can only be called by ROOT.
        /// </summary>
        public GenericExtrinsicCall ForceUnreserve(EnumMultiAddress who, U128 amount)
        {
            return new GenericExtrinsicCall("Balances", "force_unreserve", who, amount);
        }
    }
}
