//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.FrameSupport;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.NodeRuntime;
using SubstrateNetApi.Model.PalletCollective;
using SubstrateNetApi.Model.PrimitiveTypes;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletTechnicalCommittee
{
    
    
    public sealed class PalletTechnicalCommitteeStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public PalletTechnicalCommitteeStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> Proposals
        /// </summary>
        public async Task<SubstrateNetApi.Model.FrameSupport.BoundedVec> Proposals(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("TechnicalCommittee", "Proposals", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.FrameSupport.BoundedVec>(parameters, token);
        }
        
        /// <summary>
        /// >> ProposalOf
        /// </summary>
        public async Task<SubstrateNetApi.Model.NodeRuntime.EnumNodeCall> ProposalOf(SubstrateNetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("TechnicalCommittee", "ProposalOf", Storage.Type.Map, new[] {Storage.Hasher.Identity}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.NodeRuntime.EnumNodeCall>(parameters, token);
        }
        
        /// <summary>
        /// >> Voting
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletCollective.Votes> Voting(SubstrateNetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("TechnicalCommittee", "Voting", Storage.Type.Map, new[] {Storage.Hasher.Identity}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletCollective.Votes>(parameters, token);
        }
        
        /// <summary>
        /// >> ProposalCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> ProposalCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("TechnicalCommittee", "ProposalCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> Members
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>> Members(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("TechnicalCommittee", "Members", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>(parameters, token);
        }
        
        /// <summary>
        /// >> Prime
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> Prime(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("TechnicalCommittee", "Prime", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
    }
}
