//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Extrinsics;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletBagsList;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletBagsList
{
    
    
    public sealed class BagsListStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public BagsListStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string,string>("BagsList", "CounterForListNodes"), new System.Tuple<Storage.Hasher[],Type>(null, null));
            _client.StorageKeyDict.Add(new System.Tuple<string,string>("BagsList", "ListNodes"), new System.Tuple<Storage.Hasher[],Type>(new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                            SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNetApi.Model.SpCore.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string,string>("BagsList", "ListBags"), new System.Tuple<Storage.Hasher[],Type>(new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                            SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNetApi.Model.Types.Primitive.U64)));
        }
        
        /// <summary>
        /// >> CounterForListNodesParams
        ///  How many ids are registered.
        /// </summary>
        public static string CounterForListNodesParams()
        {
            return RequestGenerator.GetStorage("BagsList", "CounterForListNodes", SubstrateNetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForListNodes
        ///  How many ids are registered.
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> CounterForListNodes(CancellationToken token)
        {
            string parameters = BagsListStorage.CounterForListNodesParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ListNodesParams
        ///  A single node, within some bag.
        /// 
        ///  Nodes store links forward and back within their respective bags.
        /// </summary>
        public static string ListNodesParams(SubstrateNetApi.Model.SpCore.AccountId32 key)
        {
            return RequestGenerator.GetStorage("BagsList", "ListNodes", SubstrateNetApi.Model.Meta.Storage.Type.Map, new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                        SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new SubstrateNetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ListNodes
        ///  A single node, within some bag.
        /// 
        ///  Nodes store links forward and back within their respective bags.
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletBagsList.Node> ListNodes(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            string parameters = BagsListStorage.ListNodesParams(key);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletBagsList.Node>(parameters, token);
        }
        
        /// <summary>
        /// >> ListBagsParams
        ///  A bag stored in storage.
        /// 
        ///  Stores a `Bag` struct, which stores head and tail pointers to itself.
        /// </summary>
        public static string ListBagsParams(SubstrateNetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("BagsList", "ListBags", SubstrateNetApi.Model.Meta.Storage.Type.Map, new SubstrateNetApi.Model.Meta.Storage.Hasher[] {
                        SubstrateNetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new SubstrateNetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ListBags
        ///  A bag stored in storage.
        /// 
        ///  Stores a `Bag` struct, which stores head and tail pointers to itself.
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletBagsList.Bag> ListBags(SubstrateNetApi.Model.Types.Primitive.U64 key, CancellationToken token)
        {
            string parameters = BagsListStorage.ListBagsParams(key);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletBagsList.Bag>(parameters, token);
        }
    }
    
    public sealed class BagsListCalls
    {
        
        /// <summary>
        /// >> rebag
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Rebag(SubstrateNetApi.Model.SpCore.AccountId32 dislocated)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dislocated.Encode());
            return new Method(40, "BagsList", 0, "rebag", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> Rebagged
    /// Moved an account from one bag to another. \[who, from, to\].
    /// </summary>
    public sealed class EventRebagged : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U64, SubstrateNetApi.Model.Types.Primitive.U64>
    {
    }
}
