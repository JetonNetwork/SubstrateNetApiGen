//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.FrameSupport;
using SubstrateNetApi.Model.FrameSystem;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PrimitiveTypes;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.SpRuntime;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.FrameSystem
{
    
    
    public sealed class FrameSystemStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public FrameSystemStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> Account
        /// </summary>
        public async Task<SubstrateNetApi.Model.FrameSystem.AccountInfo> Account(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("System", "Account", Storage.Type.Map, new[] {Storage.Hasher.BlakeTwo128Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.FrameSystem.AccountInfo>(parameters, token);
        }
        
        /// <summary>
        /// >> ExtrinsicCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> ExtrinsicCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "ExtrinsicCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> BlockWeight
        /// </summary>
        public async Task<SubstrateNetApi.Model.FrameSupport.PerDispatchClass> BlockWeight(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "BlockWeight", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.FrameSupport.PerDispatchClass>(parameters, token);
        }
        
        /// <summary>
        /// >> AllExtrinsicsLen
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> AllExtrinsicsLen(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "AllExtrinsicsLen", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> BlockHash
        /// </summary>
        public async Task<SubstrateNetApi.Model.PrimitiveTypes.H256> BlockHash(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("System", "BlockHash", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PrimitiveTypes.H256>(parameters, token);
        }
        
        /// <summary>
        /// >> ExtrinsicData
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.Types.Primitive.U8>> ExtrinsicData(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("System", "ExtrinsicData", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.Types.Primitive.U8>>(parameters, token);
        }
        
        /// <summary>
        /// >> Number
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> Number(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "Number", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ParentHash
        /// </summary>
        public async Task<SubstrateNetApi.Model.PrimitiveTypes.H256> ParentHash(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "ParentHash", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PrimitiveTypes.H256>(parameters, token);
        }
        
        /// <summary>
        /// >> Digest
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpRuntime.Digest> Digest(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "Digest", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpRuntime.Digest>(parameters, token);
        }
        
        /// <summary>
        /// >> Events
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.FrameSystem.EventRecord>> Events(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "Events", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.FrameSystem.EventRecord>>(parameters, token);
        }
        
        /// <summary>
        /// >> EventCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> EventCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "EventCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> EventTopics
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>>> EventTopics(SubstrateNetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("System", "EventTopics", Storage.Type.Map, new[] {Storage.Hasher.BlakeTwo128Concat}, keyParams);
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>>>(parameters, token);
        }
        
        /// <summary>
        /// >> LastRuntimeUpgrade
        /// </summary>
        public async Task<SubstrateNetApi.Model.FrameSystem.LastRuntimeUpgradeInfo> LastRuntimeUpgrade(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "LastRuntimeUpgrade", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.FrameSystem.LastRuntimeUpgradeInfo>(parameters, token);
        }
        
        /// <summary>
        /// >> UpgradedToU32RefCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.Bool> UpgradedToU32RefCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "UpgradedToU32RefCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
        
        /// <summary>
        /// >> UpgradedToTripleRefCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.Bool> UpgradedToTripleRefCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "UpgradedToTripleRefCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
        
        /// <summary>
        /// >> ExecutionPhase
        /// </summary>
        public async Task<SubstrateNetApi.Model.FrameSystem.EnumPhase> ExecutionPhase(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("System", "ExecutionPhase", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.FrameSystem.EnumPhase>(parameters, token);
        }
    }
}
